#!/usr/bin/env python3
# -*- coding: latin-1 -*-
# HEREHEREHERE

#############################################################################
# 
#  /home/wayne/git/clones/Strasburg/py/OTA.py
#
#emacs helpers
# (insert (format "\n# " (buffer-file-name)))
#
# (ediff-current-file)
# (wg-python-fix-pdbrc)
# (find-file-other-frame "./.pdbrc")
# (wg-python-fix-pdbrc)   # PDB DASH DEBUG end-comments
#
# (setq mypdbcmd (concat (buffer-file-name) "<args...>"))
# (progn (wg-python-fix-pdbrc) (pdb mypdbcmd))
#
# (wg-astroconda-pdb)       # IRAF27
# (wg-astroconda3-pdb)      # CONDA Python3
#
# (set-background-color "light blue")
# (wg-python-toc)
#               
#############################################################################
import optparse
import re
import sys
import numpy as np
import datetime
import json

from PySide2.QtWidgets import QApplication,QMainWindow, QDialog

##############################################################################
# AttitudeUI.py
# NASpectrographyUI.py
# SiteUI.py
# SpectrographUI.py
#
##############################################################################
from NASpectrographyUI import Ui_NASpectrography
from SpectrographUI    import Ui_Spectrograph
from SpectrographVariables import *
import MPCCodes



# (wg-python-graphics)
__doc__ = """

/home/wayne/git/clones/Strasburg/py/OTA.py
[options] files...

A main class for a OTA: This handles instruments on the
OTA

       1               2              3
/path/to/ota/  instrument/sensor / command


AttitudeUI.py
NASpectrographyUI.py
SiteUI.py
SpectrographUI.py

compLampSwitch
flatLampSwitch
heater1Switch
heater2Switch
slitLampSwitch
DecPosition
PAPosition
RAPosition
airmassValue
focusAbsolute
focusOffset
gratingAbsolute
gratingOffset
heater1Delta
heater1SetPoint
heater2Delta
heater2SetPoint
rotatorAbsolute
rotatorOffset
rotatorPosition
temp1Value
temp2Value
temp3Value
temp4Value
temp5Value
temp6Value
temp7Value
spectroLog
horizontalSlider
focusSteps
gratingSteps
rotatorAngle
rotatorSteps

"""


__author__  = 'Wayne Green'
__version__ = '0.1'

dialogstylesheet = """
QLabel         {background-color : darkred; color: white; font-weight: bold;}
QDialog        {background-color : darkred;}
QLineEdit      {background-color : white;}
QPushButton    {background       : gray; color: black;border: 1px solid white; border-radius: 5;}
QGroupBox      {background-color : darkred; color : white;}
QCheckBox      {background-color : darkred; color : white;}
QSpinBox       {background       : rgb(255, 252, 155);}
QToolButton    {background       : black;}
QPlainTextEdit {background : rgb(255, 252, 155);}
"""

# QPlainTextEdit {background-color : rgb(255, 252, 155); color : black;}

slitwidths = ['10', '20' , '30', '40', '50', '70', '100', '150', '200', '300', '500', '700']

class QTASpectrograph(QDialog,Ui_Spectrograph):
   """OTA has lots of things to deal with. It has one dialog,
      that reserves the rights to open others.
   """

   def __init__(self):                               # QTASpectrograph::__init__()
      super().__init__()
      #self.setupUi(self)
      self.setupUi(self)
      self.closeButton.    clicked    .connect(self.myclosebutton)
      self.setStyleSheet(dialogstylesheet)
      self.slitSelection.addItems(slitwidths)
      self.jsonsave = {}        # place to save.restore values
      self.mount    = None

   ### QTASpectrograph.__init__()

   def myclosebutton(self):  # QTASpectrograph::myclosebutton()
      print("Close Button")
      self.savevalues()
      jstring = json.dumps(self.jsonsave,indent=3)
      print(jstring)
      self.accept()

   ### QTASpectrograph.myclosebutton()

   def _savevalues(self):                             # QTASpectrograph::_savevalues()
      """Load up the JSON data structure. There is quite a trick on this.
         The ui directory has a makefile, that runs a local varmake.awk
         that generate the file "SpectrographVariables.txt". Wipe out the
         old one and emacs eval-last-sexp on the commented line below.
      """
      # (progn (insert "\n")(insert-file "SpectrographVariables.txt"))
      SpectrographUI_savejsondict(self,self.jsonsave)

   ### QTASpectrograph._savevalues()


   def _loadjsonsave(self):                          # QTASpectrograph::_loadjsonsave()
      '''Autogenerated code from make trick.'''
      SpectrographUI_loadjsondict(self,self.jsonsave)

   ### QTASpectrograph._loadjsonsave()

# class QTASpectrograph


##############################################################################
# OTAException
#
##############################################################################
class OTAException(Exception):
   """Special exception to allow differentiated capture of exceptions"""
   def __init__(self,message,errors=None):
      super(OTAException,self).__init__("OTA "+ message)
      self.errors = errors
   @staticmethod
   def __format__(e):
      return "OTA" % e
# OTAException



##############################################################################
# OTA
#
##############################################################################
class OTA(QMainWindow,Ui_NASpectrography):  # OTA(object) if inherited
   """ The main window
   """

   def __init__(self,app):                           # OTA::__init__()
      """Initialize this class."""
      #super(base,self).__init__()
      #self.
      super().__init__()
      #self.setupUi(self)
      self.setupUi(self)
      self.SpectrographDialog    .clicked  .connect(self.myspectrograph)

   ### OTA.__init__()


   def debug(self,msg="",os=sys.stderr):           # OTA::debug()
      """Help with momentary debugging, file to fit."""
      print("OTA - %s " % msg, file=os)
      for key,value in self.__dict__.items():
         print("%20s = %s" % (key,value),file=os)

      return self

   ### OTA.debug()

   __OTA_debug = debug  # preserve our debug name if we're inherited

   def myspectrograph(self):
      """Launch the spectrograph Dialog"""
      dlg = QTASpectrograph()
      if dlg.exec_():
         print("Success!")
      else:
         print("Cancel!")

# class OTA


##############################################################################
#                                    Main
#                               Regression Tests
##############################################################################
# HEREHEREHERE
if __name__ == "__main__":
   opts = optparse.OptionParser(usage="%prog "+__doc__)

   opts.add_option("-v", "--verbose", action="store_true", dest="verboseflag",
                   default=False,
                   help="<bool>     be verbose about work.")

   (options, args) = opts.parse_args()

   try:
      app    = QApplication(sys.argv)  # PDB-DEBUG
      window = OTA(app)
      window.show()
      sys.exit(app.exec_())
   except Exception as e:
      print("Exception {}".format(e))
      sys.exit(1)


