#!/usr/bin/awk -f

#############################################################################
# Translate the makefile's output of class and varname for selected
# widgets into a python save statement indented for a python class member.
# The output of the .ui xml code is parsed for certain widget statements
# by a judicious grep statement -- that pipes its output into this
# program. For each of the matched patterns, the line, being broken
# up by awk is then used to form the correct statements to both
# save then load. A argument is used to set a prefix for this file
# and the file is saved as prefix_blah.py. Whereupon the class that
# inherits the ui output class may load this as a static definition
# and call it by passing 'self' as a parameter! A pseudo methond.
#
#############################################################################
BEGIN { delete arr[0]; delete loadarr[0];  # declare the arrays!
defprefix = prefix;
}

function push(A,B) { A[length(A)+1] = B }

/QCheckBox/        { savestmt = sprintf("   jdict['%s'] = self.%s.isChecked()"    ,$2, $2);
                     loadstmt = sprintf("   self.%s.setChecked(jdict['%s'])"      ,$2, $2);
                     push(arr,savestmt);
                     push(loadarr,loadstmt);
                   }

/QLineEdit/        { savestmt = sprintf("   jdict['%s'] = self.%s.text()"         ,$2, $2);
                     loadstmt = sprintf("   self.%s.setText(jdict['%s'])"         ,$2, $2);
                     push(arr,savestmt);
                     push(loadarr,loadstmt);
                   }

/QPlainTextEdit/   { savestmt = sprintf("   jdict['%s'] = self.%s.toPlainText()"  ,$2, $2);
                     loadstmt = sprintf("   self.%s.insertPlainText(jdict['%s'])" ,$2, $2);
                     push(arr,savestmt);
                     push(loadarr,loadstmt);
                   }

/QSlider/          { savestmt = sprintf("   jdict['%s'] = self.%s.TickPosition()" ,$2, $2);
                     loadstmt = sprintf("   self.%s.setValue(jdict['%s'])"        ,$2, $2);
                     push(arr,savestmt);
                     push(loadarr,loadstmt);
                   }

/QSpinBox/         { savestmt = sprintf("   jdict['%s'] = self.%s.value()"        ,$2, $2);
                     loadstmt = sprintf("   self.%s.setValue(jdict['%s'])"        ,$2, $2);
                     push(arr,savestmt);
                     push(loadarr,loadstmt);
                   }

/./                { next; }

END {
   printf("__init__ = [\"%s_savejsondict\",\"%s_loadjsondict\"]\n", defprefix,defprefix)
   printf("def %s_savejsondict(self,jdict):\n", defprefix);
   print("   '''Autogenerated code from ui's make/awk trick.'''");
   for (i=1; i<=length(arr); ++i) {
       printf("%s\n",arr[i]);
   }
   printf("\n# def %s_savejsondict\n", defprefix)

   printf("def %s_loadjsondict(self,jdict):\n",defprefix);
   print("   '''Autogenerated code from ui's make/awk trick.'''");
   for (i=1; i<=length(loadarr); ++i) {
       printf("%s\n",loadarr[i]);
   }
   printf("\n# def %s_loadjsondict\n", defprefix);
}

